{"version":3,"sources":["components/navbar/navbar.js","components/preferences/risk_scale_button.js","components/preferences/preference_table.js","components/preferences/preference_chart.js","components/preferences/preferences.js","util/preference_util.js","components/preferences/preference_container.js","actions/preference_actions.js","components/portfolio/portfoilo_table.js","util/calculator_util.js","components/portfolio/portfolio_form.js","components/portfolio/portfolio.js","components/portfolio/portfolio_container.js","components/app.js","components/root.js","reducers/preferences_reducer.js","reducers/root_reducer.js","index.js"],"names":["Navbar","className","to","icon","faHome","size","RiskScaleButton","props","level","update","id","onClick","PreferenceTable","preferences","map","idx","Object","values","item","DonutChart","data","preference","color","shift","value","push","label","dataEntry","labelPosition","lineWidth","paddingAngle","radius","viewBoxSize","Preference","state","bonds","largeCap","midCap","foreign","smallCap","bind","this","fetchPreferences","row","style","backgroundColor","btn","document","getElementById","prevLevel","prevRow","continueBtn","getElementsByClassName","disabled","updateRowColor","setState","risk","React","Component","1","2","3","4","5","6","7","8","9","10","connect","dispatch","type","createDisabledInput","sign","getValue","createInput","callBack","onChange","toFixed","PortfolioTable","titles","difference","newAmount","header","title","e","splitAssets","portfolio","outflow","inflow","recommendations","asset","calculateRecData","negative","positive","length","amount","Math","min","abs","PortfolioForm","currentAmount","NaN","preventDefault","totalAmount","total","assetValue","calculateTotalAmount","percentage","calculateNewPortfolio","diff","i","calculateDiff","calculateRec","num","currentTarget","slice","match","alert","parseInt","indices","index","keys","inflowTitle","onSubmit","handleSubmit","includes","disableSubmitBtn","enableSubmitBtn","renderRecommendations","Portfolio","fetchPreference","params","App","exact","path","component","PreferenceContainer","PortfolioContainer","Root","store","preferenceReducer","action","freeze","newState","rootReducer","combineReducers","createStore","reducer","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.07779f11.chunk.js","sourcesContent":["import React, { useState, useEffect }from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faHome} from '@fortawesome/free-solid-svg-icons';\nimport './navbar.css';\nimport { Link } from \"react-router-dom\";\n\n\nconst Navbar = () => {\n    return(\n        <div className=\"navbar\">\n            <Link to=\"/\">\n                <FontAwesomeIcon\n                    icon={faHome}\n                    className=\"home-icon\"\n                    size=\"3x\"\n                />\n            </Link>\n\n            <div className='title'>\n                Finance Advisor\n            </div>\n        </div>\n    )\n}\n\nexport default Navbar;","import './preferences.css';\n\nconst RiskScaleButton = (props) => {\n    \n    const { level, update } = props\n    return(\n        <button \n            key={level} \n            className=\"risk-scale-btn\"\n            id={level}\n            onClick={() => update(level)}\n        >\n            {level}\n        </button>\n    )\n}\n\nexport default RiskScaleButton;","import './preferences.css';\nimport '../../resize.css';\n\nconst PreferenceTable = ({preferences}) => {\n    return(\n        <table>\n            <thead>\n                <tr>\n                    <th id=\"risk\">Risk</th>\n                    <th>Bonds %</th>\n                    <th>Large Cap %</th>\n                    <th>Mid Cap %</th>\n                    <th>Foreign %</th>\n                    <th>Small Cap %</th>\n                </tr>\n            </thead>\n            <tbody>\n                {preferences.map((level, idx) => {\n                    return(\n                        <tr \n                            className={idx % 2 === 0 ? \"row-grey\" : null} \n                            id={`row-${idx + 1}`}\n                            key={idx}\n                            >\n                            {Object.values(level).map((item, idx) => {\n                                return(\n                                    <td id={idx === 0 ? \"risk\": null} key={idx}>\n                                        {item}\n                                    </td>\n                                )\n                            })}\n                        </tr>\n                    )\n                })}\n            </tbody>\n                \n        </table>\n    )\n}\n\nexport default PreferenceTable;","import { PieChart } from 'react-minimal-pie-chart';\nimport './preferences.css';\nimport '../../resize.css';\n\nconst DonutChart = (props) => {\n    let data = [];\n    const values = Object.values(props.preference)\n    \n    const color = ['red', 'yellow', 'blue', 'green', 'purple'];\n    values.shift();\n    values.map((value, idx) => {\n        if (value !== 0) {\n            data.push({\n                value: value,\n                color: color[idx]\n            })\n        }\n    })\n\n    return(\n        <>\n        <PieChart            \n            data={data}\n            label={({dataEntry}) => `${dataEntry.value}%`}\n            labelPosition={65}\n            lineWidth={75}\n            paddingAngle={0}\n            radius={50}\n            viewBoxSize={[100, 100]}\n        />\n        </>\n    )\n}\n\n\n\nexport default DonutChart;","\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport RiskScaleButton from './risk_scale_button';\nimport PreferenceTable from './preference_table';\nimport DonutChart from './preference_chart';\nimport './preferences.css';\nimport '../../resize.css';\n\nclass Preference extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            id: 0,\n            bonds: 0,\n            largeCap: 0,\n            midCap: 0,\n            foreign: 0,\n            smallCap: 0\n        };\n        this.update = this.update.bind(this);\n    }   \n\n    componentDidMount() {\n        this.props.fetchPreferences();\n    }\n\n    updateRowColor(row, level) {\n        if (level % 2 === 0) {\n                row.style.backgroundColor = 'white';\n        } else {\n                row.style.backgroundColor = '#f9f9f9';\n        }\n    }\n\n    update(id){\n        const level = this.state.id;\n        const { \n                bonds, \n                largeCap, \n                midCap, \n                foreign, \n                smallCap \n            } = this.props.preferences[id - 1];\n\n        const btn = document.getElementById(`${id}`);\n        const prevLevel = document.getElementById(`${level}`);\n        const row = document.getElementById(`row-${id}`);\n        const prevRow = document.getElementById(`row-${level}`);\n        const continueBtn = document.getElementsByClassName('continue-btn');\n\n        btn.style.backgroundColor = 'yellow';\n        row.style.backgroundColor = 'yellow';\n        continueBtn.disabled = false;\n\n        if (prevLevel) prevLevel.style.backgroundColor = 'white';\n        if (prevRow) this.updateRowColor(prevRow, level)\n\n        this.setState({id, bonds, largeCap, midCap, foreign, smallCap});\n    }\n\n    render() {\n        const { preferences } = this.props;\n        const risk  = this.state.id;\n        if (!preferences) return null;\n\n        return(\n            <div className=\"form-body\">\n                 <h3>Please Select A Risk Level For Your Investment Portfolio</h3>\n                 <div>\n                     <div className=\"risk-scale-label\">\n                         <label id=\"low\">Low</label>\n                         <label id=\"high\">High</label>\n                 </div>\n\n                 <div className=\"btn-wrapper\">\n                    {preferences.map(preference => {\n                        return(\n                            <RiskScaleButton \n                                level={preference.id} \n                                update = {this.update}\n                                key={preference.id}\n                                />\n                        )\n                    })}\n\n                    <Link to={`/calculator/${risk}`}>\n                        {risk > 0 ? <button className=\"continue-btn\">Continue</button> :\n                        <button className=\"continue-btn\" disabled>Continue</button>}\n                        \n                    </Link>\n                 </div>\n\n                 <div className=\"img_table_wrapper\">\n                    <PreferenceTable preferences={preferences}/>\n                 </div>\n\n                 <div className=\"chart\">\n                    <DonutChart preference={this.state}/>\n                 </div>\n             </div>           \n         </div>\n        )\n    }\n\n}\nexport default Preference;","export const preferences = {\n    \n    1: {\n            \"id\": 1,\n            \"bonds\": 80,\n            \"largeCap\": 20,\n            \"midCap\": 0,\n            \"foreign\": 0,\n            \"smallCap\": 0\n        },\n    2: {\n            \"id\": 2,\n            \"bonds\": 70,\n            \"largeCap\": 15,\n            \"midCap\": 15,\n            \"foreign\": 0,\n            \"smallCap\": 0\n        },\n    3: {\n            \"id\": 3,\n            \"bonds\": 60,\n            \"largeCap\": 15,\n            \"midCap\": 15,\n            \"foreign\": 10,\n            \"smallCap\": 0\n        },\n    4: {\n            \"id\": 4,\n            \"bonds\": 50,\n            \"largeCap\": 20,\n            \"midCap\": 20,\n            \"foreign\": 10,\n            \"smallCap\": 0\n        },\n    5: {\n            \"id\": 5,\n            \"bonds\": 40,\n            \"largeCap\": 20,\n            \"midCap\": 20,\n            \"foreign\": 20,\n            \"smallCap\": 0\n        },\n    6: {\n            \"id\": 6,\n            \"bonds\": 35,\n            \"largeCap\": 25,\n            \"midCap\": 5,\n            \"foreign\": 30,\n            \"smallCap\": 5\n        },\n    7: {\n            \"id\": 7,\n            \"bonds\": 20,\n            \"largeCap\": 25,\n            \"midCap\": 25,\n            \"foreign\": 25,\n            \"smallCap\": 5\n        },\n    8: {\n            \"id\": 8,\n            \"bonds\": 10,\n            \"largeCap\": 20,\n            \"midCap\": 40,\n            \"foreign\": 20,\n            \"smallCap\": 10\n        },\n    9: {\n            \"id\": 9,\n            \"bonds\": 5,\n            \"largeCap\": 15,\n            \"midCap\": 40,\n            \"foreign\": 15,\n            \"smallCap\": 15\n        },\n    10: {\n            \"id\": 10,\n            \"bonds\": 0,\n            \"largeCap\": 5,\n            \"midCap\": 25,\n            \"foreign\": 30,\n            \"smallCap\": 40\n        }\n    }\n\n","\nimport { connect } from 'react-redux';\nimport Preference from './preferences';\nimport { fetchPreferences } from '../../actions/preference_actions';\n\nconst mapStateToProps = ({ preferences }) => {\n    return {\n      preferences: Object.values(preferences)\n    }\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchPreferences: () => dispatch(fetchPreferences()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Preference);","import { preferences } from \"../util/preference_util\";\n\nexport const RECEIVE_PREFERENCES = \"RECEIVE_PREFERENCES\";\nexport const RECEIVE_PREFERENCE = \"RECEIVE_PREFERENCE\";\n\nexport const fetchPreferences = () => {\n    return {type: RECEIVE_PREFERENCES, preferences}\n}\nexport const fetchPreference = risk => {\n    return {type: RECEIVE_PREFERENCE, preference: preferences[risk]}\n}\n\n","import './portfolio.css';\nimport '../../resize.css';\n\nconst PortfolioTable = ({state, update, titles}) => {\n    const headers = [\n                    'Portfolio', \n                    'Current Amount', \n                    'Difference', \n                    'New Amount'\n                    ]\n \n    const { difference, newAmount } = state;\n    return(\n        <table className=\"portfolio-table\">\n            <thead className=\"portfolio-thead\">\n                <tr>\n                    {headers.map((header, idx) => \n                        <th className=\"header\" key={idx}>{header}</th>\n                    )}\n                </tr>\n            </thead>\n\n            <tbody className=\"portfolio-tbody\">\n                {titles.map((title, idx) => {\n                    return(\n                        <tr key={idx}>\n                            <td >{title}</td>\n                            {createInput(e => update(idx, e))}                           \n                            {difference[idx] >= 0 ? \n                                createDisabledInput(difference[idx], true, 'green inputs') : \n                                createDisabledInput(difference[idx], true, 'red inputs')\n                            }\n                            {createDisabledInput(newAmount[idx], false, 'blue inputs')}\n                        </tr>                             \n                    )\n                })}\n            </tbody>\n        </table>\n    )\n}\n\nconst createDisabledInput = (value, sign, className) => {\n    return(\n        <td>\n            <input \n                value={getValue(value, sign)} \n                className={className} \n                disabled              \n                />\n        </td>\n    )\n}\n\nconst createInput = (callBack) => {\n    return(\n        <td>\n            <input \n                type='text' \n                className=\"inputs\"\n                onChange={callBack}/>\n        </td>\n    )\n}\n\nconst  getValue = (value, sign) => {\n        if (!value && value !== 0) {\n            return null;\n        } else if (value > 0 && sign) {\n            return `+${value.toFixed(2)}`;\n        } else {\n            return value.toFixed(2);\n        }\n    }\n\nexport default PortfolioTable;","export const calculateTotalAmount = (portfolio) => {\n    let total = 0;\n    portfolio.map(assetValue => total += assetValue);\n    return total;\n}\n\nexport const calculateNewPortfolio = (preference, totalAmount) => {\n    const portfolio = [];\n    preference.map(percentage => {\n        let amount = totalAmount * percentage / 100;\n        portfolio.push(amount);\n    })\n    return portfolio;\n}\n\nexport const calculateDiff = (portfolio, preference) => {\n    const diff = [];\n    for (let i = 0; i < portfolio.length; i++) {\n        diff.push(preference[i] - portfolio[i]);\n    }\n    return diff;\n}\n\nexport const calculateRec = (portfolio) => {\n    const recommendations = {};\n    const outflow = []; \n    const inflow = [];  \n    splitAssets(portfolio, outflow, inflow, recommendations);\n    calculateRecData(portfolio, outflow, inflow, recommendations);\n    return recommendations;\n}\n\nconst splitAssets = (portfolio, outflow, inflow, recommendations) => {\n    portfolio.map((asset, idx) => {\n        if (asset < 0) {\n            outflow.push(idx);\n            recommendations[idx] = [];\n        } else if (asset > 0) {\n            inflow.push(idx);\n        }\n    })\n}\n\nconst calculateRecData = (portfolio, outflow, inflow, recommendations) => {\n    let negative;\n    let positive = portfolio[inflow[0]];\n\n    outflow.map(idx => {\n        negative = portfolio[idx];\n        while (negative < 0) {\n            if (!inflow.length || positive < 0) break;\n            const amount = Math.min(positive, Math.abs(negative));           \n            recommendations[idx].push({[inflow[0]]: amount});\n            negative += amount;\n\n            if (positive > amount) {\n                positive -= amount;\n            } else {\n                inflow.shift();\n                if (inflow.length) positive = portfolio[inflow[0]];\n            }\n        }\n    })\n}","import React from 'react';\nimport './portfolio.css';\nimport '../../resize.css';\nimport PortfolioTable from './portfoilo_table';\nimport { calculateTotalAmount, \n         calculateNewPortfolio, \n         calculateDiff,\n         calculateRec\n        } from '../../util/calculator_util';\n\nclass PortfolioForm extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            currentAmount: [NaN, NaN, NaN, NaN, NaN],\n            difference: [],\n            newAmount: [],\n            recommendations: {}\n        }\n    }\n\n    handleSubmit(e) {        \n        e.preventDefault();\n        const { currentAmount } = this.state;\n        const totalAmount = calculateTotalAmount(currentAmount);\n        const newAmount = calculateNewPortfolio(this.props.preference, totalAmount);\n        const difference = calculateDiff(currentAmount, newAmount);\n        const recommendations = calculateRec(difference);\n        this.setState({newAmount, difference, recommendations});\n    }\n\n    update(idx, e) {\n        e.preventDefault();\n        const num = e.currentTarget.value;\n        const currentAmount = this.state.currentAmount.slice();\n        \n        if (num.match(/[^$,.\\d]/)) {\n            alert('error');\n            currentAmount[idx] = NaN;\n        } else {\n            currentAmount[idx] = parseInt(num);\n        }\n        this.setState({currentAmount: currentAmount})\n    }\n\n    enableSubmitBtn() {\n        \n        return(\n            <button id=\"rebalance-btn\">Rebalance</button>\n        )\n    }\n\n    disableSubmitBtn() {\n        return(\n            <button id=\"rebalance-btn\" disabled>Rebalance</button> \n        )\n    }\n\n    renderRecommendations(indices, titles) {\n        return indices.map(index => {\n            const outflow = titles[index];\n            const inflows = this.state.recommendations[index];\n            return inflows.map((asset,idx) => {\n                let index = Object.keys(asset)[0];\n\n                const inflowTitle = titles[index];\n                const amount = asset[index];\n                return(\n                    <li key={idx} className=\"recommendation-text\">\n                        Transfer ${amount.toFixed(2)} from {outflow} to {inflowTitle}.\n                    </li>\n                )\n            })\n        })\n    }\n\n    render(){\n        const titles = [\n            'Bonds', \n            'Large Cap', \n            'Mid Cap', \n            'Foreign', \n            'Small Cap'\n            ];\n        \n        const { currentAmount, recommendations } = this.state;\n        const  values = Object.values(currentAmount);\n        const indices = Object.keys(recommendations);\n\n        return(\n            <div>\n                <form onSubmit={(e) => this.handleSubmit(e)} className=\"portfolio-form\">\n                    <header className=\"portfolio-header\">\n                        <h2>Please select your portfolio</h2>\n                        {values.includes(NaN) ? \n                        this.disableSubmitBtn() : \n                        this.enableSubmitBtn() }                       \n                    </header>\n                    <PortfolioTable \n                        state={this.state} \n                        update={this.update.bind(this)}\n                        titles={titles}\n                        />\n                    <div>\n                        <h2 className=\"recommendation\">Recommendations</h2>\n                        <ul>\n                            {indices.length ? this.renderRecommendations(indices, titles) : null}                                          \n                        </ul>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default PortfolioForm;","import React from 'react';\nimport PreferenceTable from '../preferences/preference_table';\nimport ProfolioForm from './portfolio_form';\nimport './portfolio.css';\nimport '../../resize.css';\n\nclass Portfolio extends React.Component{\n     constructor(props){\n        super(props);\n        this.state = {\n            bonds: 0,\n            largeCap:0,\n            midCap:0,\n            foreign: 0,\n            smallCap: 0\n        };\n    }   \n\n    componentDidMount() {\n        this.props.fetchPreference(this.props.match.params.level);\n    }\n\n    render() {\n        const { preference } = this.props;\n        if (!preference) return null;\n        const values = Object.values(preference);\n        return (\n            <div className=\"portfolio-container\">\n                <h1>Personal Portfolio</h1>\n                <h2>Risk Level {preference.id}</h2>\n                <PreferenceTable preferences={[values]}/>\n                <ProfolioForm preference={values.slice(1)}/>\n            </div>\n\n        )\n    }\n}\n\nexport default Portfolio;","\nimport { connect } from 'react-redux';\nimport { fetchPreferences, fetchPreference } from '../../actions/preference_actions';\nimport Portfolio from './portfolio';\n\nconst mapStateToProps = ({preferences}, {match}) => {\n    return {\n      preference: preferences[match.params.level],\n    }\n};\n\nconst mapDispatchToProps = dispatch => ({\n//   fetchPreferences: () => dispatch(fetchPreferences()),\n  fetchPreference: (level) => dispatch(fetchPreference(level)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Portfolio);","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport Navbar from './navbar/navbar';\nimport PreferenceContainer from './preferences/preference_container';\nimport PortfolioContainer from './portfolio/portfolio_container';\n\nconst App = () => {\n  return(\n      <div>\n        <header>\n          <Navbar />\n        </header>\n\n        <Route exact path=\"/\" component={PreferenceContainer} /> \n        <Route exact path=\"/calculator/:level\" component={PortfolioContainer} />\n      </div>\n  )\n}\n\nexport default App;\n\n","\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './app';\n\nconst Root = ({store}) => (\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>\n);\n\nexport default Root;","import { RECEIVE_PREFERENCE } from '../actions/preference_actions';\nimport {merge} from 'lodash';\n\nconst preferenceReducer = (state = {}, action) => {\n  Object.freeze(state);\n  switch (action.type) {\n    case 'RECEIVE_PREFERENCES':\n      return action.preferences;\n    case 'RECEIVE_PREFERENCE':\n      const newState = {[action.preference.id]: action.preference}\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport default preferenceReducer;","\nimport { combineReducers } from 'redux';\nimport preferences from './preferences_reducer';\n// import portfolio from './portfolio_reducer';\n// import errors from './error_reducer';\n\nconst rootReducer = combineReducers({\n    preferences,\n    // portfolio,\n    // errors,\n})\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './components/root';\nimport { createStore } from 'redux';\nimport reducer from './reducers/root_reducer';\n// import reportWebVitals from './reportWebVitals';\n\n\nconst store = createStore(reducer);\nReactDOM.render(\n  <React.StrictMode>\n    <Root store={store} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}